package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.Observable;
import java.util.Observer;
import java.util.Random;

import javax.swing.JPanel;

import model.Board;
import model.Point;
import model.TetrisPiece;
/**
 * 
 * @author Patrick
 * @version 1.0
 * 
 */
public class NextPiecePanel extends JPanel implements Observer {

    /**
     * 
     */
    private static final long serialVersionUID = 168426035370641970L;
    /**
     * 
     */
    private TetrisPiece myNextPiece;
    /**
     * 
     */
    private Point[] myPoint;
    /**
     * 
     */
    private Board myBoard;
    
    
    /**
     * 
     * @param theBoard 
     */
    public NextPiecePanel(final Board theBoard) {
        
        super();
        myBoard = theBoard;
        myBoard.addObserver(this);
        setPreferredSize(new Dimension(100, 100));
        setBackground(Color.BLACK);
        
    }
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        final Random random = new Random();
        final int red = random.nextInt(256);
        final int green = random.nextInt(256);
        final int blue = random.nextInt(256);
        
        final Color randomColor = new Color(red, green, blue);
        if (myNextPiece != null) {
            myPoint = myNextPiece.getPoints();
            for (int i = 0; i < myPoint.length; i++) {
                
                g2d.setPaint(randomColor);
                g2d.fillRect((int) (myPoint[i].x() * 20 + getWidth() / 5.5), 
                             getHeight()- myPoint[i].y() * 20 - 30, 19, 19);

                
            }
        }
    }

    @Override
    public void update(final Observable theBoard, final Object theObject) {
            if (theObject instanceof TetrisPiece) {
                
                myNextPiece = (TetrisPiece) theObject;

                repaint();
        }
    }
}
