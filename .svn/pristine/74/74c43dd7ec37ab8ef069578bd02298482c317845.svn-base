package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

import model.Block;
import model.Board;
import model.TetrisPiece;

/**
 * 
 * @author Patrick Stevens
 * @version 1.0
 *
 */
public class BoardPanel extends JPanel implements Observer {

    /**
     * 
     */
    private Board myBoard;
    /**
     * 
     */
    private TetrisPiece myNextPiece;
    private List<Block[]> myBlock;

    /**
     * 
     */
    private static final long serialVersionUID = 7784901084261352281L;
    /**
     * 
     */
    public BoardPanel() {
        
        super();
        setBackground(Color.GRAY);
        
        myBlock = new ArrayList<>();
        
        myBoard = new Board();
        myBoard.addObserver(this);
        setVisible(true);
        
        
    }
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        final Iterator<Block[]> itr = myBlock.iterator();
        
        final int scale = getWidth() / 10;
        for (int i = 20 - 1; i >= 0; i--) {
            final Block[] row = itr.next();
            
            for (int j = row.length - 1; j >= 0; j--) {
                if (row[j] != null) {
                    g2d.setPaint(Color.RED);
                    g2d.fillRoundRect(j * scale, i * scale, scale - 1, 
                                      scale - 1, scale/2, scale/2);
                }
            }  
        }
    }

    @Override
    public void update(final Observable theBoard, final Object theObject) {
        if (theBoard instanceof Board) {
            if (theObject instanceof TetrisPiece) {
                myNextPiece = (TetrisPiece) theObject; 
                repaint();
                
            } else if (theObject instanceof List<?>) {
                myBlock = (List<Block[]>) theObject;
                repaint();
            } else if (theObject instanceof Boolean){
                if ((boolean)theObject == true) {
                    JOptionPane.showMessageDialog(this, 
                             "GAME OVER", "GAME OVER GAME OVER GAME OVER GAME OVER GAME OVER", 
                                   JOptionPane.INFORMATION_MESSAGE); 
                }
               
            }
        }
    }

}
