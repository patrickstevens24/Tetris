package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.Board;
import model.Point;
import model.TetrisPiece;
/**
 * 
 * @author Patrick
 *
 */
public class NextPiecePanel extends JPanel implements Observer {

    /**
     * 
     */
    private static final long serialVersionUID = 168426035370641970L;
    
    private TetrisPiece myNextPiece;

    private Point[] myPoints;

    private Point[] myPoint;
    
    
    
    public NextPiecePanel() {
        super();
        setPreferredSize(new Dimension(100, 100));
        setBackground(Color.WHITE);
        
    }
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        
        if (myPoint != null) {
            System.out.print("Pls");
            for (final Point p : myPoint) {
                g2d.setPaint(Color.BLUE);

                g2d.fillRect((p.x() * 20) + ((getWidth() / 3) - (2 * 20)) +1
                             , (-p.y() * 20) + ((getHeight()) - (2 * 20) + 15), 
                             20 - 1, 20 - 1);
                
            }
        }
    }

    @Override
    public void update(final Observable theBoard, final Object theObject) {
        if (theBoard instanceof Board) {
            if (theObject instanceof TetrisPiece) {
                myNextPiece = (TetrisPiece) theObject;
                myPoint = myNextPiece.getPoints();
                repaint();
            }
        }
    }
}
